/// @file    IEnableDisablePassKey.h
/// @author  Matthew Green
/// @date    10/17/2023 19:48:57
/// 
/// @section LICENSE
/// 
/// Copyright (c) 2023 Matthew Green - All rights reserved
/// Unauthorized copying of this file, via any medium is strictly prohibited
/// Proprietary and confidential

#pragma once

namespace velecs {

class IInput;  ///< Forward declaration of the Input class

/// @class IEnableDisablePassKey
/// @brief Provides a passkey mechanism for enabling or disabling certain functionalities.
/// 
/// The IEnableDisablePassKey class is meant to be used as a friend class to control
/// access to certain functionalities within other classes. By keeping its constructors private
/// and making other classes friends, it ensures that only designated classes can create 
/// instances of IEnableDisablePassKey, which can then be used as passkeys to access controlled 
/// functionalities.
class IEnableDisablePassKey {
public:
    // Enums

    // Public Fields

    // Public Methods

protected:
    // Protected Fields

    // Protected Methods

private:
    // Friends

    friend class IInput; /// @brief Grants the Input class access to the private constructor of IEnableDisablePassKey.

    // Private Fields

    // Constructors and Destructors
    
    /// @brief Default constructor. Accessible only to friend classes.
    IEnableDisablePassKey() = default;
    
    /// @brief Copy constructor. Deleted to prevent copying.
    IEnableDisablePassKey(const IEnableDisablePassKey&) = delete;
    
    /// @brief Copy assignment operator. Deleted to prevent copy assignment.
    /// 
    /// @return Reference to this IEnableDisablePassKey instance.
    IEnableDisablePassKey& operator=(const IEnableDisablePassKey&) = delete;

    // Private Methods
};

} // namespace velecs
